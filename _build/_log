### Starting build.
# Target: author.mli.depends, tags: { package(ANSITerminal), package(ounit2), package(yojson), extension:mli, file:author.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -package ANSITerminal -modules author.mli > author.mli.depends
# Target: author.cmi, tags: { package(ANSITerminal), package(ounit2), package(yojson), byte, compile, extension:mli, file:author.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o author.cmi author.mli
# Target: author.ml.depends, tags: { package(ANSITerminal), package(ounit2), package(yojson), extension:ml, file:author.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -package ANSITerminal -modules author.ml > author.ml.depends
# Target: author.cmo, tags: { package(ANSITerminal), package(ounit2), package(yojson), byte, compile, extension:cmo, extension:ml, file:author.cmo, file:author.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o author.cmo author.ml
# Target: command.mli.depends, tags: { package(ANSITerminal), package(ounit2), package(yojson), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -package ANSITerminal -modules command.mli > command.mli.depends
# Target: command.cmi, tags: { package(ANSITerminal), package(ounit2), package(yojson), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o command.cmi command.mli
# Target: command.ml.depends, tags: { package(ANSITerminal), package(ounit2), package(yojson), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -package ANSITerminal -modules command.ml > command.ml.depends
# Target: command.cmo, tags: { package(ANSITerminal), package(ounit2), package(yojson), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o command.cmo command.ml
# Target: course.mli.depends, tags: { package(ANSITerminal), package(ounit2), package(yojson), extension:mli, file:course.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -package ANSITerminal -modules course.mli > course.mli.depends
# Target: course.cmi, tags: { package(ANSITerminal), package(ounit2), package(yojson), byte, compile, extension:mli, file:course.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o course.cmi course.mli
# Target: course.ml.depends, tags: { package(ANSITerminal), package(ounit2), package(yojson), extension:ml, file:course.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -package ANSITerminal -modules course.ml > course.ml.depends
# Target: course.cmo, tags: { package(ANSITerminal), package(ounit2), package(yojson), byte, compile, extension:cmo, extension:ml, file:course.cmo, file:course.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o course.cmo course.ml
# Target: game.mli.depends, tags: { package(ANSITerminal), package(ounit2), package(yojson), extension:mli, file:game.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -package ANSITerminal -modules game.mli > game.mli.depends
# Target: player.mli.depends, tags: { package(ANSITerminal), package(ounit2), package(yojson), extension:mli, file:player.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -package ANSITerminal -modules player.mli > player.mli.depends
# Target: player.cmi, tags: { package(ANSITerminal), package(ounit2), package(yojson), byte, compile, extension:mli, file:player.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o player.cmi player.mli
# Target: game.cmi, tags: { package(ANSITerminal), package(ounit2), package(yojson), byte, compile, extension:mli, file:game.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o game.cmi game.mli
# Target: game.ml.depends, tags: { package(ANSITerminal), package(ounit2), package(yojson), extension:ml, file:game.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -package ANSITerminal -modules game.ml > game.ml.depends
# Target: game.cmo, tags: { package(ANSITerminal), package(ounit2), package(yojson), byte, compile, extension:cmo, extension:ml, file:game.cmo, file:game.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o game.cmo game.ml
+ ocamlfind ocamlc -c -package ounit2 -package yojson -package ANSITerminal -o game.cmo game.ml
File "game.ml", line 41, characters 50-61:
41 |       let hole_scores = init_scorecard players h1.hole_number in 
                                                       ^^^^^^^^^^^
Error: Unbound record field hole_number
Command exited with code 2.
# Compilation unsuccessful.
